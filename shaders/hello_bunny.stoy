uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iGlobalTimeDelta;      // render time (in seconds)
uniform int       iFrame;                // shader playback frame
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)

mat2 rot( in float a ) {
	float c = cos(a),
        s = sin(a);
    return mat2(c, s, -s, c);
}

float sdEllipsoid( in vec2 p, in vec2 r )
{
    return (length( p/r ) - 1.0) * min(r.x,r.y);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	float it = iGlobalTime;
	vec2 uv = fragCoord.xy / iResolution.xy;

    // aspect x
    uv -= 0.5;
    uv.x *= iResolution.x / iResolution.y;

    // Timeline
    float tAppearH = smoothstep(0., 5., it);
    float tshakeH = smoothstep(0., 5., it);
    float tFluffyH = smoothstep(4., 6., it);
    float tOffsetH = smoothstep(20., 28., it);
    float tAppearL = smoothstep(28.25, 28.75, it);
    float tAppearR = smoothstep(29.25, 29.75, it);
    float tPink = smoothstep(31., 32., it);

    // background
    vec3 c = mix(vec3(0.), vec3(1., .2, .5), tPink);

    vec2 rext = vec2(.3, .8);
    vec2 rint = rext - .2;

    // right ear - ellipsoid inner + outer

    float angle = 0.5 + (0.035 + 0.05 * cos(it + 1.));
    vec2 uvE = rot(angle) * uv;
    uvE *= 4.0;
    uvE += vec2(-0.2, -0.7) * tAppearR;
    float d = sdEllipsoid(uvE, rint * tAppearR);
    float r = step(d, 0.);
    c = mix(c, vec3(1., 0.58, 0.75), r * tAppearR);
    d = max(sdEllipsoid(uvE, rext * tAppearR), -d);
    r = smoothstep(.01, .0, d);
    c = mix(c, vec3(1.), r);

    // left ear - ellipsoid inner + outerx
    angle = 0.37 + (0.05 + 0.05 * sin(it * 1.05));
    uvE = uv * rot(angle);
    uvE *= 4.0;
    uvE += vec2(0.2, -0.7) * tAppearL;
    d = sdEllipsoid(uvE, rint * tAppearL);
    r = step(d, 0.);
    c = mix(c, vec3(1., 0.58, 0.75), r * tAppearL);
    d = max(sdEllipsoid(uvE, rext * tAppearL), -d);
    r = smoothstep(.01, .0, d);
    c = mix(c, vec3(1.), r);

    // head - circle
    uvE = uv * rot(0.);
    uvE *= 14.0 / tAppearH;
    uvE += vec2(.2, .2) * tOffsetH;
    float amplitude = .1 * tshakeH;
    float ampSpeed = 20.;
    d = sdEllipsoid(uvE, vec2(
    		1.5 + amplitude *cos(it * ampSpeed),
    		1.5 + amplitude *sin(it * ampSpeed)
    ));
    float fluffyness = (1 + sin(it * .5)) * .2;
    r = smoothstep(.32 + fluffyness * tFluffyH, .30, d); // [0., 1.]
    c = mix(c, vec3(1.), r);

	fragColor = vec4(c, 1.);
}

    // alternative way to make an ear - rebased circle
    /*vec2 uvO = uv;
    uvO *= rot(0.5);
    uvO.x *= 3.;
    uvO *= 1.5;
    uvO.y -= 0.28;
    uvO.x += 0.29;
    float d = length(uvO);
    float r = smoothstep(.31, .30, d); // [0., 1.]
    c = mix(c, vec3(1.0, 0.79, 0.89), r);*/

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
