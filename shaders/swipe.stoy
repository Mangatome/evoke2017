uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iGlobalTimeDelta;            // render time (in seconds)
uniform int       iFrame;                // shader playback frame
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)

mat2 rot( in float a ) {
	float c = cos(a),
        s = sin(a);
    return mat2(c, s, -s, c);
}

float sdStrip( in vec2 uv, in float angle, in float size ) {
	vec2 uvS = 10. * rot(angle) * uv;
    return max(uv.x - uvS.x - size, -uv.x + uvS.x - size);
}

float swipe( in float period, in float bmin, in float bmax ) {
    float s = 2. * max(mod(iGlobalTime, 2. * period) - period, 0.) - period;
    //return s;
    return (((s / period) + 1.) * .5 * (bmax - bmin)) + bmin;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = ( fragCoord - .5* iResolution.xy ) / iResolution.y;
    float E = 1./iResolution.y;

    // color background
	vec3 c = vec3(fragCoord.xy / iResolution.xy,0.5+0.5*sin(iGlobalTime));

    // vertical swiping strip
    vec2 uvS = uv + swipe(1., 2., -2.);
    float d = sdStrip(uvS, 0.3, 2.);
    float r = smoothstep(E + 0.05, E, d);
    c = mix(c, vec3(1.) - c, r);

    fragColor = vec4(c, 1.);
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
